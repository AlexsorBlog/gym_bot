import random
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from dispatcher import dp, bot
from datetime import datetime
from datetime import timedelta
from bot import BotDB
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import asyncio

Pay_button = InlineKeyboardButton(text="–ü–ª–∞—Ç–Ω–æ", callback_data="–ü–ª–∞—Ç–Ω–æ")
Free_button = InlineKeyboardButton(text="–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ", callback_data="–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ")
inline_answer1 = InlineKeyboardMarkup().add(Pay_button).add(Free_button)
About_button = KeyboardButton(text="–ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
Next_pay_button = KeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–ª–∞—Ç–∞")
In_gym_button = KeyboardButton(text="–Ø –≤ –∑–∞–ª—ñ")
Out_gym_button = KeyboardButton(text="–Ø –ø—ñ—à–æ–≤ –∑ –∑–∞–ª—É")
All_in_gym_button = KeyboardButton(text="–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –≤ –∑–∞–ª—ñ?")
in_gym_check = KeyboardButton(text="–¢–∞–∫", callback_data="–Ø –≤—Å–µ —â–µ –≤ –∑–∞–ª—ñ")
main_reply = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(In_gym_button).add(About_button).add(Next_pay_button).add(All_in_gym_button)
in_gym_reply = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(Out_gym_button)
in_gym_check_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(in_gym_check).add(Out_gym_button)

class Test(StatesGroup):
    Question1 = State()
    Question2 = State()

@dp.message_handler(commands="start")
async def start(message: types.Message):
    if(not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id, message.from_user.username)
        BotDB.update_info(message.from_user.id, 'in_gym', "FALSE")
        await message.bot.send_message(message.from_user.id, "–í—ñ—Ç–∞—éüëã\n–Ø –±–æ—Ç —Å–ø–æ—Ä—Ç–∑–∞–ª—É 11 –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É!\n–î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", parse_mode="html")
        await message.bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ:")
        await Test.Question1.set()
    else:
        pass
    # await message.bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ —Ç–∞ –∫—ñ–º–Ω–∞—Ç—É:")
    # await Test.Question2.set()
    # await message.bot.send_message(message.from_user.id, "–£ —è–∫—ñ–π —Ñ–æ—Ä–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –∑–∞–ª?\n<b>–ü–ª–∞—Ç–Ω–æ - 100–≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å<\b>\n<b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ - 1 —Ä–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å –ø—Ä–∏–±–∏—Ä–∞—Ç–∏ –∑–∞–ª<\b>", parse_mode="html")

@dp.message_handler(state=Test.Question1)
async def answer_question(message: types.Message, state: FSMContext):
    answer = message.text
    BotDB.update_info(message.from_user.id, 'name_surname', answer)
    data = BotDB.get_google_list(0)
    status = BotDB.google_update_data(0, len(data)+1, 1, answer)
    status = BotDB.google_update_data(0, len(data)+1, 3, message.from_user.username)
    await state.update_data(answer=(len(data)+1))
    await message.bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ —Ç–∞ –∫—ñ–º–Ω–∞—Ç—É:")
    await Test.Question2.set()

@dp.message_handler(state=Test.Question2)
async def answer_question(message: types.Message, state: FSMContext):
    row = await state.get_data()
    row_data = row.get("answer")
    await state.update_data(answer=row_data)
    print("Row: " + str(row_data))
    answer = message.text
    BotDB.update_info(message.from_user.id, 'adres', answer)
    status = BotDB.google_update_data(0, row_data, 2, answer)
    await message.bot.send_message(message.from_user.id,
                                   "–£ —è–∫—ñ–π —Ñ–æ—Ä–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –∑–∞–ª?\n<b>–ü–ª–∞—Ç–Ω–æ - 100–≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å</b>\n<b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ - 1 —Ä–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å –ø—Ä–∏–±–∏—Ä–∞—Ç–∏ –∑–∞–ª</b>",
                                   parse_mode="html", reply_markup=inline_answer1)
    await Test.Question2.set()


@dp.callback_query_handler(state=Test.Question2)
async def check_button(call: types.CallbackQuery, state: FSMContext):
    row = await state.get_data()
    row_data = row.get("answer")
    await state.finish()
    if call.data == "–ü–ª–∞—Ç–Ω–æ":
        BotDB.update_info(call.from_user.id, "payment_type", "True")
        BotDB.update_info(call.from_user.id, 'next_pay', 31)
        end_date = datetime.now() + timedelta(days=31)
        status = BotDB.google_update_data(0, row_data, 4, datetime.strftime(end_date, "%d.%m.20%y"))
        await call.bot.send_message(call.from_user.id, "–î—è–∫—É—é, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=main_reply)
    elif call.data == "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ":
        BotDB.update_info(call.from_user.id, "payment_type", "False")
        status = BotDB.google_update_data(0, row_data, 4, "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ")
        await call.bot.send_message(call.from_user.id, "–î—è–∫—É—é, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=main_reply)

async def send_advice():
    users = BotDB.get_users()
    for user_id in users:
        next_pay = int(BotDB.get_next_pay(user_id[0]))
        next_pay -= 1
        BotDB.update_info(user_id[0], "next_pay", next_pay)
        if next_pay == 7:
            await bot.send_message(user_id[0], "–ß–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª")
        elif next_pay == 1:
            await bot.send_message(user_id[0], "–ó–∞–≤—Ç—Ä–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª")
        else:
            pass
async def scheduler():
    count = 0
    while True:
        if count == 0:
            now = datetime.now()
            delay = (0 - int(now.strftime("%H")))*3600 + (0-int(now.strftime("%M")))*60 - int(now.strftime("%S"))
            count += 1
            if delay < 0:
                delay = 86400 + delay
            print(delay)
        else:
            delay = 86400 - minus
        await asyncio.sleep(delay)
        time = datetime.now()
        await send_advice()
        minus = int(datetime.now().strftime("%S")) - int(time.strftime("%S"))

async def on_startup(dp):
    # pass
    asyncio.create_task(scheduler())

@dp.message_handler()
async def start(message: types.Message):
    # spread1_values = BotDB.get_google_list(0)
    # print(spread1_values)
    # status = BotDB.google_update_data(0, 2,1, "Hello world!")
    # print(status)d
    if message.text == "–ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        in_gym = BotDB.get_custom_info(message.from_user.id, 'in_gym')[0][0]
        if in_gym == "TRUE":
            await message.bot.send_message(message.from_user.id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É –∑ –∑–∞–ª—É!\n–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏—Ö–æ–¥—É –∑–Ω–∏–∑—É",
                                           reply_markup=in_gym_reply)
        else:
            data = BotDB.get_user_info(message.from_user.id)
            if data[2] == "True":
                payment = "–ü–ª–∞—Ç–Ω–æ"
            else:
                payment = "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ"
            stats = BotDB.get_in_gym_info(message.from_user.id)
            enter_counter = int(len(stats) / 2)
            if len(stats) == 0:
                time_gym = "0:00:00"
            for i in range(int(len(stats))):
                if i == 0:
                    time_gym = datetime.strptime(stats[i + 1][1].split(" ")[1], '%H:%M:%S') - datetime.strptime(
                        stats[i][1].split(" ")[1], '%H:%M:%S')
                    # print(datetime.strptime(stats[i + 1][1].split(" ")[0], '%y-%m-%d') - datetime.strptime(
                    #     stats[i][1].split(" ")[0], '%y-%m-%d'))
                elif i % 2 == 0:
                    time_gym = time_gym + (datetime.strptime(stats[i + 1][1].split(" ")[1], '%H:%M:%S') - datetime.strptime(
                        stats[i][1].split(" ")[1], '%H:%M:%S'))
            current_level = BotDB.get_custom_info(message.from_user.id, "level")[0][0]
            next_level_time = (int(current_level)*int(current_level)) - int(str(time_gym).split(":")[0])
            await message.bot.send_message(message.from_user.id, f"–í–∞—à–µ —ñ–º'—è - {str(data[0])}\n–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞ - {str(data[1])}\n–¢–∏–ø –æ–ø–ª–∞—Ç–∏ - {str(payment)}\n<b>–í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: </b>{str(enter_counter)}\n<b>–ß–∞—Å—É –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –≤ –∑–∞–ª—ñ: </b>{str(time_gym)}\n<b>–í–∞—à —Ä—ñ–≤–µ–Ω—å: </b>{current_level}\n<b>–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è</b>: {next_level_time} –≥–æ–¥–∏–Ω–∏", reply_markup=main_reply)
    elif message.text == "–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–ª–∞—Ç–∞":
        next_pay = BotDB.get_next_pay(message.from_user.id)
        await message.bot.send_message(message.from_user.id, f"–í–∞—à–∞ –Ω–∞—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ <b>{str(next_pay)}</b> –¥–Ω—ñ–≤", parse_mode="html", reply_markup=main_reply)
    elif message.text == "–Ø –≤ –∑–∞–ª—ñ":
        in_gym = BotDB.get_custom_info(message.from_user.id, 'in_gym')[0][0]
        if in_gym == "TRUE":
            await message.bot.send_message(message.from_user.id, "–¢–∏ —É–∂–µ –≤ –∑–∞–ª—ñ!\n–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏—Ö–æ–¥—É –∑–Ω–∏–∑—É", reply_markup=in_gym_reply)
        else:
            await message.bot.send_message(message.from_user.id, "–ì–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", reply_markup=in_gym_reply)
            await message.bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAELqhNl7xcY_Y-tSF-6n8Nw7Th6uZkn5wACugADTptkArbrc3oLzTyHNAQ")
            BotDB.get_in_gym(message.from_user.id, "–í–≤—ñ–π—à–æ–≤")
            BotDB.update_info(message.from_user.id, 'in_gym', "TRUE")
            await asyncio.sleep(10800)
            status = BotDB.get_custom_info(message.from_user.id, "in_gym")[0][0]
            if status == "TRUE":
                await message.bot.send_message(message.from_user.id, "–¢–∏ –≤—Å–µ —â–µ –≤ –∑–∞–ª—ñ?", reply_markup=in_gym_check_markup)
    elif message.text == "–Ø –ø—ñ—à–æ–≤ –∑ –∑–∞–ª—É":
        in_gym = BotDB.get_custom_info(message.from_user.id, 'in_gym')[0][0]
        if in_gym == "FALSE":
            await message.bot.send_message(message.from_user.id, "–¢–∏ —ñ —Ç–∞–∫ –Ω–µ –≤ –∑–∞–ª—ñ!", reply_markup=main_reply)
        else:
            await message.bot.send_message(message.from_user.id, "–ö–ª–∞—Å–Ω–æ –Ω–∞–ø–∞–º–ø–∏–≤—Å—è", reply_markup=main_reply)
            await message.bot.send_sticker(message.from_user.id,
                                           "CAACAgIAAxkBAAELqhFl7xbDwcFou5p0NkreSu9bj8zlDwACZBQAAjzxyEuwdKvRZVMPlzQE")
            BotDB.get_in_gym(message.from_user.id, "–í–∏–π—à–æ–≤")
            BotDB.update_info(message.from_user.id, 'in_gym', "FALSE")
            stats = BotDB.get_in_gym_info(message.from_user.id)
            for i in range(int(len(stats))):
                if i == 0:
                    time_gym = datetime.strptime(stats[i + 1][1].split(" ")[1], '%H:%M:%S') - datetime.strptime(
                        stats[i][1].split(" ")[1], '%H:%M:%S')
                    # print(datetime.strptime(stats[i + 1][1].split(" ")[0], '%y-%m-%d') - datetime.strptime(
                    #     stats[i][1].split(" ")[0], '%y-%m-%d'))
                elif i % 2 == 0:
                    time_gym = time_gym + (datetime.strptime(stats[i + 1][1].split(" ")[1], '%H:%M:%S') - datetime.strptime(
                        stats[i][1].split(" ")[1], '%H:%M:%S'))
            current_level = BotDB.get_custom_info(message.from_user.id, "level")[0][0]
            hours_gym = int(str(time_gym).split(":")[0])
            if hours_gym >= (int(current_level)*int(current_level)):
                new_level = current_level + 1
                await message.bot.send_message(message.from_user.id, f"–í—ñ—Ç–∞—é, —Ç–∏ –ø—Ä–æ–≤—ñ–≤ —É –∑–∞–ª—ñ: <b>{str(hours_gym)}</b> –≥–æ–¥–∏–Ω!\n–¢–µ–ø–µ—Ä —É —Ç–µ–±–µ <b>{str(new_level)}</b> —Ä—ñ–≤–µ–Ω—åü•≥", parse_mode="html", reply_markup=main_reply)
                BotDB.update_info(message.from_user.id, "level", new_level)
    elif message.text == "–¢–∞–∫":
        await message.bot.send_message(message.from_user.id, "–ö—Ä—É—Ç–æ!", reply_markup=in_gym_reply)
    elif message.text == "–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –≤ –∑–∞–ª—ñ?":
        in_gym = BotDB.get_all_in_gym()
        counter = 0
        for i in in_gym:
            if i[0] == "TRUE":
                counter += 1
        await message.bot.send_message(message.from_user.id, f"–í –∑–∞–ª—ñ –∑–∞—Ä–∞–∑ <b>{counter}</b> –ª—é–¥–µ–π", parse_mode="html", reply_markup=main_reply)

